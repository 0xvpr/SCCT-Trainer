Health:
	4 byte int              // x86 unsigned long int
	Starts at 450 on normal
	Starts at 300 on hard
	starts at 150 on expert

Offsets:
	Entity* Entity:
		entity_type = 0x0
		x_pos		= 0xE8
		y_pos		= 0xEC
		z_pos 		= 0xF0
		health 		= 0x420

- - - - - - -

PlayerCam* PlayerCam (Broken):
	"splintercell3.exe" + 0x8FA4E8 -> 0xC8 -> 0x7CC
	
EntityList* EntityListAddr (Non-consisten):
	"splintercell3.exe" + 0xA0DFEC -> 0x78 -> 0x5E4
	
- - - - - - -

PlayerVisibility:
	"splintercell.exe" + 0x27F12C      // You can probably go up a little higher and fudge the esi + 1518 value instead.
	original_code	= 8B 86 18 15 00 00 -> mov eax, [esi + 00001518]
	new_code		= B8 00 00 00 00 90 -> mov eax, 00000000; nop
	byte_length		= 6
	
PlayerSound:
	"splintercell3.exe" + 0x417E59     // Maybe even move zero
	original_code = D9 9E 3C 04 00 00 == fstp dword ptr [esi+0000043C]
	new_doe       = 90 90 90 90 90 90 == nop
	byte_length   = 6
	
OneShotKill (ALL):
	"splintercell3.exe" + 0x3F07C2    // One shots you as well. Detour is probably the best solution here.
	original_code = 89 03  // mov [ebx], eax
	new_code      = 31 1B  // xor eax, eax
	byte_length   = 2
	
	
Doors:
	There appears to be a byte value of 0x04 that corresponds
	to the access level of the door.

	The disassembler shows - or dword ptr [ecx + 000004B8], 04 
	
	the line I see is...
		04 00 00 00 06 40 8A C5 5F 78 C0 45 00 00 C0 C1

Ammo:  
	SNIPER AMMO:
		splintercell3.exe + 0x2FBC58 48                    - dec eax
									 89 86 54040000        - mov [esi+00000454],eax
									 8B 86 5C040000        - mov eax,[esi+0000045C]
									 48                    - dec eax
		length = 14

	MAIN WEAPON AMMO:
	    splintercell3.exe + 0x2F9E4A 4B - dec ebx
		                             4F - dec edi
	    length = 2


